const { Db } = require('mongodb')
const config = require('../config-loader.js')
const createAuthorizationMiddleware = require('./createAuthorization.js');

/**
 * @param {Object<string, *>} claims
 * @param {Db} db
 * @returns {Promise<Array<string>>}
 */
async function getAccountIds(claims, db) {
    if (config.get('my.superuser') === claims.name) {
        return ["*"];
    }
    const removeNamespaces = g => g.split("/").slice(-1)[0];
    const groups = new Set(claims.groups.map(removeNamespaces));
    const allowedAccountIds = new Set();

    const groupToIdCollection = db.collection('group_to_id');
    for (const doc of await groupToIdCollection.find({}).toArray()) {
        if (groups.has(doc.group)) {
            allowedAccountIds.add(doc.account_id);
        }
    }

    return Array.from(allowedAccountIds);
}

/**
 * @param {string} id
 * @param {Db} db
 * @returns {Promise<{environments: Array<string>, teams: Array<string>, tenants: Array<{ id: string, name: string, description: string }> }>}
 */
async function getDetailsByAccountId(id, db) {
    const idToDetailsCollection = db.collection('id_to_details');

    const details = await(idToDetailsCollection.find({
        $elemMatch: {
            account_id: id
        }
    }).toArray())[0];
    return {
        environments: details.environments,
        teams: [details.team],
        tenants: details.tenants,
    }
}

module.exports = createAuthorizationMiddleware(getAccountIds, getDetailsByAccountId)
